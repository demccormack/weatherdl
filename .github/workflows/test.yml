name: Test, lint and format

on: 
  push:
    branches:
      - "**"
    tags:
      - "v*"

jobs:
  test-lint-and-format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: 3.12
    - name: Negotiate Python package hell
      run: sed -i '/python-magic-bin/d' requirements-prod.txt
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-prod.txt -r requirements-dev.txt
    - name: Test
      run: pytest
    - name: Lint
      run: pylint $(git ls-files '*.py')
    - name: Format
      run: black . --check

  build-releases:
    needs: test-lint-and-format
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: windows
          - os: macos-13
            platform: macos
          - os: ubuntu-latest
            platform: ubuntu
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Set up build environment (Windows)
        if: matrix.platform == 'windows'
        run: |
          python -m venv venv
          .\venv\Scripts\Activate.ps1
          python -m pip install --upgrade pip
          python -m pip install -r requirements-prod.txt -r requirements-build.txt

      - name: Negotiate Python package hell (Windows)
        if: matrix.platform == 'windows'
        run: |
          .\venv\Scripts\Activate.ps1
          python -m pip uninstall -y python-magic-bin

          $url = 'https://files.pythonhosted.org/packages/07/c2/094e3d62b906d952537196603a23aec4bcd7c6126bf80eb14e6f9f4be3a2/python_magic_bin-0.4.14-py2.py3-none-win_amd64.whl'
          $dest = 'python_magic_bin-0.4.14-py2.py3-none-win_amd64.whl'
          Write-Host "Downloading from $url"
          Invoke-WebRequest -Uri $url -OutFile $dest

          if ((Get-FileHash -Path $dest -Algorithm SHA256).Hash -ne '90BE6206AD31071A36065A2FC169C5AFB5E0355CBE6030E87641C6C62EDC2B69') {
              Write-Error 'Checksum does not match'
              exit 1
          }

          python -m pip install $dest

      - name: Build for Windows
        if: matrix.platform == 'windows'
        run: |
          .\venv\Scripts\Activate.ps1
          python -m PyInstaller -n weatherdl --onefile --add-data 'venv\Lib\site-packages\pptx\templates:pptx\templates' src\main.py

      - name: Copy config files (Windows)
        if: matrix.platform == 'windows'
        run: |
          Copy-Item config.json dist

      - name: Negotiate Python package hell (Ubuntu)
        if: matrix.platform == 'ubuntu'
        run: |
          sed -i '/python-magic-bin/d' requirements-prod.txt

      - name: Set up build environment (macOS/Ubuntu)
        if: matrix.platform != 'windows'
        run: |
          python3 -m venv venv
          source venv/bin/activate
          python3 -m pip install -r requirements-prod.txt -r requirements-build.txt

      - name: Build for macOS/Ubuntu
        if: matrix.platform != 'windows'
        run: |
          source venv/bin/activate
          python3 -m PyInstaller -n weatherdl --onefile --add-data "venv/lib/*/site-packages/pptx/templates:pptx/templates" src/main.py

      - name: Copy config files (macOS/Ubuntu)
        if: matrix.platform != 'windows'
        run: |
          cp config.json dist

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: weatherdl-for-${{ matrix.platform }}
          path: dist

  test-windows-release:
    needs: build-releases
    runs-on: windows-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Download Windows build artifact
        uses: actions/download-artifact@v4
        with:
          name: weatherdl-for-windows
          path: dist

      - name: Test release
        run: |
          Copy-Item tests/fixtures/config.json dist
          cd dist
          echo '' | .\weatherdl.exe
          $testdir = "$HOME\weatherdl_release_test_run"
          if (-not (Test-Path -Path "$testdir\001 Flying to Mt Cook.jpeg") -or -not (Test-Path -Path "$testdir\briefing.pptx")) {
              Write-Error "Integration test failed"
              ls
              exit 1
          }

  test-macos-release:
    needs: build-releases
    runs-on: macos-13
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Download macOS build artifact
        uses: actions/download-artifact@v4
        with:
          name: weatherdl-for-macos
          path: dist
      
      - name: Install libmagic
        run: brew install libmagic

      - name: Test release
        run: |
          set -x
          cp -f tests/fixtures/config.json dist
          chmod -R +x dist
          cd dist
          echo | ./weatherdl
          TEST_DIR="$HOME/weatherdl_release_test_run"
          [[ -f "$TEST_DIR/001 Flying to Mt Cook.jpeg" ]]
          [[ -f "$TEST_DIR/briefing.pptx" ]]

  test-ubuntu-release:
    needs: build-releases
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Download Ubuntu build artifact
        uses: actions/download-artifact@v4
        with:
          name: weatherdl-for-ubuntu
          path: dist

      - name: Test release
        run: |
          set -x
          cp -f tests/fixtures/config.json dist
          chmod -R +x dist
          cd dist
          echo | ./weatherdl
          TEST_DIR="$HOME/weatherdl_release_test_run"
          [[ -f "$TEST_DIR/001 Flying to Mt Cook.jpeg" ]]
          [[ -f "$TEST_DIR/briefing.pptx" ]]

  publish-windows:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [test-windows-release]
    runs-on: ubuntu-latest
    steps:
      - name: Download Windows build artifact
        uses: actions/download-artifact@v4
        with:
          name: weatherdl-for-windows
          path: dist

      - name: Produce artifacts
        run: |
          Compress-Archive -Path dist\* -DestinationPath weatherdl-for-windows.zip

      - name: Upload Windows release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          release_name: ${{ github.ref_name }}
          file: weatherdl-for-windows.zip
          asset_name: weatherdl-for-windows.zip
          tag: ${{ github.ref }}
          overwrite: true
          body: |
            [Download for Windows](https://github.com/demccormack/weatherdl/releases/download/${{ github.ref_name }}/weatherdl-for-windows.zip)
            [Download for MacOS](https://github.com/demccormack/weatherdl/releases/download/${{ github.ref_name }}/weatherdl-for-macos.zip)
            [Download for Ubuntu](https://github.com/demccormack/weatherdl/releases/download/${{ github.ref_name }}/weatherdl-for-ubuntu.zip)

  publish-macos:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [test-macos-release]
    runs-on: ubuntu-latest
    steps:
      - name: Download macOS build artifact
        uses: actions/download-artifact@v4
        with:
          name: weatherdl-for-macos
          path: dist

      - name: Produce artifacts
        run: |
          zip weatherdl-for-macos.zip dist/*

      - name: Upload macOS release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          release_name: ${{ github.ref_name }}
          file: weatherdl-for-macos.zip
          asset_name: weatherdl-for-macos.zip
          tag: ${{ github.ref }}
          overwrite: true
          body: |
            [Download for Windows](https://github.com/demccormack/weatherdl/releases/download/${{ github.ref_name }}/weatherdl-for-windows.zip)
            [Download for MacOS](https://github.com/demccormack/weatherdl/releases/download/${{ github.ref_name }}/weatherdl-for-macos.zip)
            [Download for Ubuntu](https://github.com/demccormack/weatherdl/releases/download/${{ github.ref_name }}/weatherdl-for-ubuntu.zip)

  publish-ubuntu:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [test-ubuntu-release]
    runs-on: ubuntu-latest
    steps:
      - name: Download Ubuntu build artifact
        uses: actions/download-artifact@v4
        with:
          name: weatherdl-for-ubuntu
          path: dist

      - name: Produce artifacts
        run: |
          zip weatherdl-for-ubuntu.zip dist/*

      - name: Upload Ubuntu release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          release_name: ${{ github.ref_name }}
          file: weatherdl-for-ubuntu.zip
          asset_name: weatherdl-for-ubuntu.zip
          tag: ${{ github.ref }}
          overwrite: true
          body: |
            [Download for Windows](https://github.com/demccormack/weatherdl/releases/download/${{ github.ref_name }}/weatherdl-for-windows.zip)
            [Download for MacOS](https://github.com/demccormack/weatherdl/releases/download/${{ github.ref_name }}/weatherdl-for-macos.zip)
            [Download for Ubuntu](https://github.com/demccormack/weatherdl/releases/download/${{ github.ref_name }}/weatherdl-for-ubuntu.zip)
